that worked like a charm, thank you.
Now let's move on to the next update.
---
The app will work with supabase database.
---
the supabase database uses postgreSQL, and for this app, we will make the following tables:
1. clients
2. quotes
4. deleted_clients
5. deleted_quotes
---

1. clients table columns:
- client_id (primary key, int8)
- first name
- last name
- email address
- phone number
- company name
- company address
- company vat number
- company website
- created_at
- last_modified

on the front end on the clients screen (which is, on the app), there (on the bottom right of the screen) should be a "+"(create new client) button for creating a new client, and this takes the user to a screen where they will fill in a form to create a new client. this will work a lot like the phonebook of most modern mobile smart phones. for the client fields, the mandatory fields are first name and email address. the rest are optional. the client_id is auto generated on the database side.
the clients screen should basically be a phonebook of all the clients in alphabetical order allowing for searching, selecting, seeing details of the client, editing, updating, deleting, etc.

---

2. quotes table columns
- client_id (foreign key) --all quotes are made for a specific client, so we will always search and select a client for a quote.
- quote_id (primary key, int8)
- quote number (this should be text. the quotes in the hotel documents for shich the app is being made are named as, for example, "QUOTATION NUMBER: YUM0186", so the quote number in this case will be the 186 for this column. Quote numbers will be auto generated, and for the purpose of the app, they will ge generated incrementally, starting from 150 upwards, so the app should be able to generate new quote numbers based on the previous quote number.
- number_of_beds
- number_of_guests
- unit_bed_cost
- unit_breakfast_cost
- unit_lunch_cost
- unit_dinner_cost
- unit_laundry_cost
- guest_details: this should be a large enough message input box that can take lots of text/characters
- check-in_date: date picker
- check-out_date: date picker
- breakfast_dates: multi date picker. this should be a calendar allowing user to pick multiple dates. the picked dates could be easily stored as array in this column.
- lunch_dates: multi date picker. this should be a calendar allowing user to pick multiple dates. the picked dates could be easily stored as array in this column.
- dinner_dates: multi date picker. this should be a calendar allowing user to pick multiple dates. the picked dates could be easily stored as array in this column.
- laundry_dates: multi date picker. this should be a calendar allowing user to pick multiple dates. the picked dates could be easily stored as array in this column.
- discount_percentage
- discount_amount
- subtotal: subtotal is calculated by adding up the totals for bed, breakfast, lunch, dinner, laundry, and other services. for bed, it is simply the number of nights multiplied by the number of beds. for breakfast/lunch/dinner/laundry it is the number of selected breakfast/lunch/dinner/laundry days multiplied by the number of guests.
- vat: this is calculated at 15% of the subtotal
- total: this is the subtotal added with vat minus discount.  for the discount, the user may choose to enter discount as a value or as a percentage (we can implement a toogle on the front end of the app)
- document type: this can be a detailed or a summarized. we will implement this on the next update. this will be used to indicate how the document will be printed at a later stage.
- attach documents. for supabase, we can use the storage functionality to store documents attached to quotes. they should be renamed and referenced accordingly, so they are never mixed with other documents.
- invoice_status: default for new quotes is "unpaid"
- created_at
- last_modified (same as created_at by default)

--- on the front end of the app, on the quotes screen page, there should essentially be a list of all quotes (like in the clients/phonebook). each quote should have the client name, quote number, as well as the last_modified date. there should then be the "+" button (bottom right of the screen) which will allow the user to create a new quote based on the info required on the quotes table. the user should be able to select, view existing quote details, search, modify, edit, delete, etc, like a standard app. for consistency, the interface should be the same as with the other pages. remember that the navigation menu should be visible on all pages.
one of the options on a quote should be to "invoice". this operation will simply update the invoice status of the quote from "unpaid" to "invoiced". this will then enlist the quote on the invoices screen. the invoices screen is the same as the quotes screen, except that these are called invoicess. there is no "+" button on the invoices screen because invoices are only created from quotes, and are the same as quotes.
the costs of bed, breakfast, lunch, dinner, and laundry are manually provided by the user. input field for bed, check-in, check-out, number of beds, number of guests, are mandatory. however, when a new quote is created for a client that already has a quote created for them, a template of the costs of bed, breakfast, lunch, dinner, and laundry is pulled, meaning these fields are prepopulated for the user, but still allow the user to modify them nonetheless
---
All currency is in South African Rands (e.g. R13.00) and values are always rounded to two decimal places).

in addition to providing with the codes for updating the app, give me the sql queries for creating the tables on supabase. row level security should be enabled, and so, i will also need policies for allowing this user to read, modify, delete, and perform all sorts of things within this scope.
---

whatever the updates you make, ensure they do not cause issues with the metro bundler, especially with the web sockets ws. please be as friendly as you can with the updates.. to help update the app smoothly, we could make one update at a time, and run it